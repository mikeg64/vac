startup3
	inicunits
	# limits for the graphs plotted by plotx:
	set dimen(fy1)=20 set dimen(fy2)=20
	# plotting defaults
	ptype 4 0    define Plotmode Surface
	viewpoint 20 20 -1
inicunits
 	set bunit=1.e-6/2/pi**.5 set mparsec=3.09e15 set mH=1.67e-24 
	set kms=1e5 set Kyear=3.15e+10
	define LABrho "\rho"
	define KMS "km\,s^{-1}" define MUG "\mu{G}" define MHCM3 "m_H\,cm^{-3}"
	define LABphi "\phi_k" define LABvs "v_s" define LABtheta "\theta_s"
	define LABwidth "\lambda" define LABky "k_\parallel"
	define LABtime "t [Kyear]" 
	define LABsigmabx "\sigma(B_x) [$!MUG]"
	define LABlnsigmabx "ln\,\sigma(B_x) [$!MUG]"
	define LABlgsigmabx "\sigma(B_x) [$!MUG]"
	define LABgrowth "s=\partial_t\,ln\,\sigma(B_x) [t^{-1}_{flow}]"
	define UNIphi "^\circ" define UNIvs "$!KMS" define UNItheta "^\circ"
	define UNIwidth "L_{flow}" define UNIky "L^{-1}_{flow}"
new
 	foreach 0 {Inifile Outfile Logfile Xmax Xmin Ymax Ymin}{
            define $0 delete
	}
putheader
	if($?Noheader){return}
 	relocate (0 32400)
 	expand 1.0001
 	define TeX_strings DELETE
 	label \\-2\\t $Headline
 	expand 1.0001
 	define TeX_strings 1
 	RELOCATE (32000 32400)
 	putlabel 4 \-2\t $date
	relocate 0 0
headeron
	define Noheader delete
headeroff
	define Noheader 1
putbottom	1
 	#Tunit=sec/Kyear   (Kyear=3.15*10^10 sec)
 	define Tunit $1
 	set sec=1
 	relocate (16200 1200)
	set time2=Int($(time/$Tunit*1000))/1000
	define Grid ('grid=$(n1)')
	do i=2,ndim{define Grid "$!Grid\times $(n$!i)"}
 	if(ixy==0){
 	    putlabel 5 t=$(time2)"\,"$Tunit, it=$(it), $Grid
 	}
	if(ixy>0){
 	    putlabel 5 \
	    t=$(time2)"\,"$Tunit, it=$(it), iy=$(ixy), $Grid
	}
 	if(ixy<0){
 	    putlabel 5 \
	    t=$(time2)"\,"$Tunit, it=$(it), ix=$(-ixy), $Grid
	}
	relocate 0 0
pointson
 	define Okpoints 1
pointsoff
 	define Okpoints delete
lineon
 	define Noline delete
lineoff
 	define Noline 1
getlog
 	#Usage: getlog      Reads Healine and all variables from logfile
 	if(!$?Logfile) { ask Logfile data/ }
 	data "$!Logfile"
 	define Headline read 1
	define Cols read 2 set cols=<$Cols> define Read_Log " "
	do i=1,dimen(cols){define Read_Log ('$Read_Log '+cols[$i-1]+' $i')}
 	lines 3 99999
 	read {$!!Read_Log}
	define Cols delete delete cols
plott	12
 	#Usage: plott dt/mass/momentx...
 	#Plots time dependence of varibles read from Logfile
	getlog
 	set logvar=$1
 	Erase
 	Limits t logvar
	if (substr('$1',0,2)=='lg'){
 	    ticksize 0 0 -1 0 notation -4 4 -2 2
 	    box
 	    ticksize 0 0 0 0 notation -4 4 -4 4
 	}else{
 	    box
 	}
 	putheader
 	connect t logvar
 	expand 1.2
 	Xlabel t
 	define _Label delete
  	if($?LAB$1){
	    ylabel $LAB$1
	}else{
	    ylabel $1
	}
 	expand 1.0001
plot1	89
 	#plot $1 in window at $2 $3 $4 $5 with units $6 for x, $7 for $1
 	#$1 is labelled by $8, x is labelled by $9 if defined
 	window $2 $3 $4 $5
 	define Xunit $6
 	define Varunit $7
 	define Ylabel $8
 	if ($?9) {define Xlabel $9} else {define Xlabel " "}
 	if(ixy!=0){
	   plot2D $1
	   return
	}
	if('$Plotmode'=='Surface'){
	   plotsurface $1
	   return
	}
	makeimage $1 n1 n2
	$Plotmode
	limits $(x[$fx1]) $(x[$fx2]) $(y[$fy1]) $(y[$fy2])
	expand 0.7    box
	expand 1.0001 ylabel "$!Ylabel"
plot2D	1
 	#plot2D var   Plot any (flow)variable as a function of x
	if(npict==0&&is_set(A$1,3)){
	    if(ixy>0){
		set rows=n1*(ixy-1),n1*ixy-1
	    }else{
		set rows=-ixy-1,n1*n2-1,n1
	    }
	    set $1=A$1[rows]
	    delete rows
	}
 	set _var=$1/$Varunit
 	set _x=$X_or_Y/$Xunit
	Limits _x _var
 	if($?Okpoints){points _x _var}
	if(!$?Noline){connect _x _var}
 	expand 0.7
 	box
 	expand 1.0001
 	xlabel $Xlabel
 	ylabel "$!Ylabel"
plotsurface	1
 	#Flowvar=r/vx/vy/p/bx/by/rn/vxn/vyn/pn/u/un
 	if(!$?Dix){ask Dix 1}
	if($?Xmin){if($Xmax>n1-1){define Xmin delete}}
 	if(!$?Xmin){define Xmin 0 define Xmax (n1-1)}
	if($Dix<0){define Dix (abs($Dix)) define Xmin ? define Xmax ?}
 	if(!$?Diy){ask Diy 1}
	if($?Ymin){if($Ymax>n2-1){define Ymin delete}}
 	if(!$?Ymin){define Ymin 0 define Ymax (n2-1)}
	if($Diy<0){define Diy (abs($Diy)) define Ymin ? define Ymax ?}
 	set sparsex=$Xmin,$Xmax,$Dix
 	set sparsey=$Ymin,$Ymax,$Diy
	takeimage $1 n1 n2 sparsex sparsey $Varunit
	set _x=x[sparsex]/(x[1]-x[0])
	set _y=y[sparsey]/(y[1]-y[0])
 	surface 103 _x _y
	define NX image define NY image
 	define Lo_x (x[sparsex[0]]/$Xunit)
	define Hi_x (x[sparsex[$NX -1]]/$Xunit)
 	define Lo_y (y[sparsey[0]]/$Xunit)
	define Hi_y (y[sparsey[$NY-1]]/$Xunit)
 	expand 0.7
	box3
	expand 1.0001
	if ($Windowy==1) {
 	    label3 x "$!Xlabel"
	    label3 y y
	}
	label3 z "$!Ylabel"
gethead
 	#read head of Inifile or Outfile
 	define Headline read 1
 	lines 2 2
 	read {it 1 time 2 ndim 3 neqpar 4 nw 5}
	lines 3 3
 	set nline=1 set head=5
	do i=1,ndim{read <n$i $i> set nline=nline*n$i}
	set nline=nline+head
 	define Eqpar read 4
	define Cols read 5 set cols=<$Cols>
        do i=1,7{define $i " "}
	do i=1,dimen(cols){
	    define Cols (cols[$i-1])
	    if($i<=dimen(cols)/2){	define 1 ('$1 A$Cols $i')
					define 3 ('$3 $Cols $i')
	    }else{			define 2 ('$2 A$Cols $i')
					define 4 ('$4 $Cols $i')}
	    if($i>ndim){		define 5 ('$5 $Cols')
	        if($i<=dimen(cols)/2){	define 6 ('$6 A$Cols')
		}else{		      	define 7 ('$7 A$Cols')}}
	}
	define Read_Arr1 ('$1') define Read_Arr2 ('$2')
	define Read_Var1 ('$3') define Read_Var2 ('$4')
	define Each_Var  ('$5')	
	define Arr1_Var  ('$6') define Arr2_Var  ('$7')
	#Determine ndir based on the occurance of numbers 2 and 3 in the Cols
	set ndir=1
	if(index('$Cols','2')>=0){set ndir=2}
	if(index('$Cols','3')>=0){set ndir=3}
	define Cols delete delete cols
	if(ndim==2){
	    set i=0,n1*n2-1 set Aiy=int(i/n1+0.0001) set Aix=i-n1*Aiy
	}
getpict	2
 	#npicture=0 for last one/1..npictmax for a new
        #ixy=0 for 3D/1..n2 for 2D along x/-1..-n1 for 2D along y.
 	set npict=$1 set ixy=$2
	if(ixy<0){define X_or_Y y}else{define X_or_Y x}
 	if(npict==0){return}
	gethead
	if($?Headonly){return}
	set line0=nline*(npict-1)+1
 	lines $(line0+1) $(line0+1)
 	read {it 1 time 2}
 	if(ixy<=0){
 	    lines $(line0+head) $(line0+nline-1)
 	    read <$Read_Arr1 $Read_Arr2>
	    set _index=0,n1-1       set x=Ax[_index]
	    set _index=0,n1*n2-1,n1 set y=Ay[_index]
            if(is_set(extraarr,1)){extraarr}
 	}else{
 	    lines $(line0+head+(ixy-1)*n1) $(line0+head+ixy*n1-1)
 	    read <$Read_Var1 $Read_Var2>
            if(is_set(extravar,1)){extravar}
 	}
plotgrid
	#Plots grid of Inifile
 	if (!$?Inifile) { ask Inifile data/ }
 	data "$!Inifile"
 	gethead
	lines $(head+1) $(nline)
 	if(ndim==1){read {x 1} set y=0*x Limits x y Erase
	    box points x y xlabel x
 	    return
 	}
 	if(ndim==2){read {x 1 y 2} Limits x y Erase
	    box points x y xlabel x 
 	    ylabel y
 	    return
	}
	if(ndim>2){
	    echo How to plot an ndim>2D grid ???
	}
gradx	2
	#Usage: gradx var dxvar
 	#Shifted indices with continuous boundary in x
 	set jxiy=Aix+(Aix<n1-1)+n1*Aiy
 	set hxiy=Aix-(Aix>0)+n1*Aiy
 	set dx=x[2]-x[0]
	set A$2=(A$1[jxiy]-A$1[hxiy])/dx
	foreach 0 {dx jxiy hxiy} {delete $0}
grady	2
	#Usage: grady var dyvar
 	#Shifted indices with  periodic  boundary in y
 	set ixjy=Aix+n1*(Aiy<n2-1)*(Aiy+1)
 	set ixhy=Aix+n1*((Aiy>0)?(Aiy-1):n2-1)
 	set dy=y[2]-y[0]
	set A$2=(A$1[ixjy]-A$1[ixhy])/dy
	foreach 0 {dy ixjy ixhy} {delete $0}
storeold
	set timeold=time
	foreach 0 <$Arr1_Var $Arr2_Var> {set $0old=$0}
getdiff
	set dtime=time-timeold
	foreach 0 <$Each_Var> {set Ad$0=A$0 - A$0old}
varx	1
	set _var=0
	do _ix=0,n1-1{
	    set _col=$_ix,n1*n2-1,n1
	    set _s =sum(A$1[_col])
	    set _s2=sum(A$1[_col]**2)
	    set _var=_var+(_s2-_s**2/n2)
	}
	set $0=_var/n1/n2
fixall
	eraseoff fixx $fx1 $fx2 define fixall 1
letall
	let define fixall delete
plotx	103
	# plotx npict ixy [var1 var2 ... ]
	set npict=$1 set ixy=$2 getpict npict ixy
	if ($?Headonly){return}
	if($?3){set var='$3' split var
        }else{  set var= ixy==0? <$Arr1_Var $Arr2_Var> : <$Each_Var>}
	set nvar=dimen(var)
	define Wx (int(sqrt(nvar)+.99)) define Wy (int(nvar/$Wx+.99))
	Erase
	define y_gutter 0.5
	set ivar=0
	do iwy=$Wy,1,-1{ do iwx=1,$Wx{
	   if (ivar<nvar){
	      set var_=$(var[ivar])
	      if($?fixall){fixy $(fy1[ivar]) $(fy2[ivar])}
	      plot1 var_ $Wx $Wy $iwx $iwy 1 1 "$!(var[ivar])" $X_or_Y
	      set fy1[ivar]=$fy1 set fy2[ivar]=$fy2
	   }
	   set ivar=ivar+1
	}}
	putheader
	putbottom sec
	define y_gutter delete
	window 1 1 1 1
oldplotx	3
	#Usage: plotx npicture ixy Flowvar
 	#npicture=0 for last one/1..npictmax for a new,
	#ix_or_y=0 for 3D surface/1..ny for 2D cut in y/-1..-nx for 2D cut in x
 	#Flowvar=r/vx/.../pn/u/un/divbc for 1 plot, phys/ryu/raw for many plots
 	set npict=$1
 	set ixy=$2
 	define FlowVar $3
 	Erase
 	getpict npict ixy
 	if ($?Headonly){return}
	define Tunit delete
	define y_gutter 0.5
 	if ('$FlowVar'=='raw') {
	    set p=(e-0.5*(b1*b1+b2*b2)-0.5*r*(v1*v1+v2*v2))*(gamma-1)
 	    plot1 rho	3 2 1 2 1 1 	"\rho"
 	    plot1 v1	3 2 2 2 1 1	"v_1"
 	    plot1 v2	3 2 3 2 1 1	"v_2"
 	    plot1 p	3 2 1 1 1 1	"p"	$X_or_Y
 	    plot1 b1	3 2 2 1 1 1	"B_1"	$X_or_Y
 	    plot1 b2	3 2 3 1 1 1	"B_2"	$X_or_Y
 	    window 1 1 1 1
 	    define Tunit sec
 	}
	if (!$?Tunit){
 	    plot1 $FlowVar 1 1 1 1 1.0 1.0 $FlowVar $X_or_Y
 	    define Tunit sec
	}
 	putheader
 	putbottom $Tunit
	define y_gutter delete
out	103
	#Usage: out npicture ixy Flowvar
 	#npicture=0 for last one/1..npictmax for a new,
	#ix_or_y=0 for 3D surface/1..n2 for 2D cut in y/-1..-n1 for 2D cut in x
 	#Flowvar=r/vx/.../pn/u/un/divbc for 1 plot,phys/ryu/raw for many plots.
 	#Picture is read from Outfile
 	if ($?1) {set npict=$1} else {set npict=1}
 	if ($?2) {set ixy=$2} else {set ixy=1}
 	if ($?3) {define FlowVar "$!3"} else {define FlowVar " "}
 	if (!$?Outfile) { ask Outfile data/ }
 	data "$!Outfile"
 	plotx npict ixy $FlowVar
outZ	103
	#Usage: outZ npicture ixy Flowvar
 	#npicture=0 for last one/1..npictmax for a new,
	#ix_or_y=0 for 3D surface/1..n2 for 2D cut in y/-1..-n1 for 2D cut in x
 	#Flowvar=r/vx/.../pn/u/un/divbc for 1 plot,phys/ryu/raw for many plots.
 	#Picture is read from compressed Outfile
 	if ($?1) {set npict=$1} else {set npict=1}
 	if ($?2) {set ixy=$2} else {set ixy=1}
 	if ($?3) {define FlowVar "$!3"} else {define FlowVar " "}
 	if (!$?Outfile) { ask Outfile data/ }
 	!uncompress -c $Outfile > $Outfile
 	data "$!Outfile"
 	plotx npict ixy $FlowVar
 	!/bin/rm -i $Outfile
ini	103
	#Usage: ini npicture ixy Flowvar
 	#npicture=0 for last one/1..npictmax for a new,
	#ix_or_y=0 for 3D surface/1..n2 for 2D cut in y/-1..-n1 for 2D cut in x
 	#Flowvar=r/vx/.../pn/u/un/divbc for 1 plot,phys/ryu/raw for many plots.
 	#Picture is read from Inifile
 	if ($?1) {set npict=$1} else {set npict=1}
 	if ($?2) {set ixy=$2} else {set ixy=1}
 	if ($?3) {define FlowVar "$!3"}else{define FlowVar " "}
 	if (!$?Inifile) { ask Inifile data/ }
 	data "$!Inifile"
 	plotx npict ixy $FlowVar
plotmethods 67
	#Usage: plotmethods Flowvar xmin xmax ymin ymax methodvar [header]
	define Flowvar $1
	fixx $2 $3
	fixy $4 $5
	Erase
        if($?7) {define Headline "$!7"
           putheader
        }
	data "data/shock12minmod.out"
	getpict 1 1
	plot1 $Flowvar 2 3 1 3 1.0 1.0 $Flowvar "minmod for $!6"
	data "data/shock12vanleer.out"
	getpict 1 1
	plot1 $Flowvar 2 3 2 3 1.0 1.0 $Flowvar "van Leer for $!6"
	data "data/shock12albada.out"
	getpict 1 1
	plot1 $Flowvar 2 3 1 2 1.0 1.0 $Flowvar "Albada for $!6"
	data "data/shock12woodward.out"
	getpict 1 1
	plot1 $Flowvar 2 3 2 2 1.0 1.0 $Flowvar "Woodward for $!6"
	data "data/shock12superbee.out"
	getpict 1 1
	plot1 $Flowvar 2 3 1 1 1.0 1.0 $Flowvar "Superbee for $!6"
	window 1 1 1 1
	putbottom sec
archie 7
	set x1=$1 set y1=$2 set x2=$3 set y2=$4 set x3=$5 set y3=$6 set c2=$7
	set ax=x1-x2 set ay=y1-y2 set a2=ax**2+ay**2
	set bx=x1-x3 set by=y1-y3 set b2=bx**2+by**2
	set dx=ax-bx set dy=ay-by set d2=dx**2+dy**2
	set ab=ax*bx+ay*by set ad=ax*dx+ay*dy set bd=bx*dx+by*dy
	set alpha=c2*(ad-sqrt(a2*b2*d2/c2-a2*b2+ab*ab))/a2/d2
	set beta =(c2-alpha*a2)/b2
	set cx=alpha*ax+beta*bx set cy=alpha*ay+beta*by
	set x4=x1-cx set y4=y1-cy
showarchie
	ptype 4 0 rel x1 y1 dot rel x2 y2 dot rel x3 y3 dot
	ptype 5 1 rel x4 y4 dot
error	1
	#Calculate average absolute deviation of $1 and $1ini
	if(is_set($1ini,3)){
	   echo Error for $1: $(sum(abs($1-$1ini))/sum(abs($1ini)))
	}else{
	   echo $1ini is not set
	}
