!##############################################################################
! module vacphys0 - mhdiso

!=============================================================================
subroutine conserve(ix^L,w)

! Transform primitive variables into conservative ones

include 'vacdef.f'

integer:: ix^L
double precision:: w(ixG^T,nw)
!-----------------------------------------------------------------------------

oktest=index(teststr,'conserv')>=1
if(oktest)write(*,*)'Conserve w:',w(ixtest^D,iwtest)

! Convert velocity to momentum
^C&w(ix^S,m^C_)=w(ix^S,rho_)*w(ix^S,v^C_);

if(oktest)write(*,*)'New w:',w(ixtest^D,iwtest)

return
end

!=============================================================================
subroutine primitive(ix^L,w)

! Transform conservative variables into primitive ones

include 'vacdef.f'

integer:: ix^L
double precision:: w(ixG^T,nw)
!-----------------------------------------------------------------------------

oktest=index(teststr,'primitive')>=1
if(oktest)write(*,*)'Primitive w:',w(ixtest^D,iwtest)

! Convert momentum to velocity
^C&w(ix^S,v^C_)=w(ix^S,m^C_)/w(ix^S,rho_);

if(oktest)write(*,*)'New w:',w(ixtest^D,iwtest)

return
end

!=============================================================================
subroutine getv(w,ix^L,idim,v)

! Calculate v_idim=m_idim/rho within ix

include 'vacdef.f'

integer:: ix^L,idim
double precision:: w(ixG^T,nw),v(ixG^T)
!-----------------------------------------------------------------------------

oktest=index(teststr,'getv')>=1
if(oktest)write(*,*)'GetV w:',w(ixtest^D,iwtest)

v(ix^S)=w(ix^S,m0_+idim)/w(ix^S,rho_)

if(oktest)write(*,*)'GetV v:',v(ixtest^D)

return 
end

!=============================================================================
subroutine getcmax(new_cmax,w,ix^L,idim,cmax)

! Calculate cmax_idim=cfast_i+abs(v_idim) within ix^L
! where cfast_i=sqrt(0.5*(cf**2+sqrt(cf**4-4*cs**2*b_i**2/rho)))
! and cf**2=b**2/rho+cs**2/rho is the square of the speed of the fast wave
! perpendicular to the magnetic field, and cs is the sound speed.
!
! For gamma=1, cs=eqpar(csoun2_), otherwise cs=gamma*(adiab*rho**gamma)/rho.

include 'vacdef.f'

logical:: new_cmax
integer:: ix^L,idim
double precision:: w(ixG^T,nw),cmax(ixG^T),cfast2(ixG^T),csound2(ixG^T)
save cfast2,csound2
!-----------------------------------------------------------------------------

oktest=index(teststr,'getcmax')>=1

!Direction independent part of getcmax:
if(new_cmax)then
   new_cmax=.false.
   call getcsound2(w,ix^L,csound2)
   cfast2(ix^S)=( ^C&w(ix^S,b^C_)**2+ )/w(ix^S,rho_)+csound2(ix^S)
end if
if(oktest) write(*,*)'cfast2:',cfast2(ixtest^D)

cmax(ix^S)=sqrt(half*(cfast2(ix^S)+&
      sqrt(cfast2(ix^S)**2-4*csound2(ix^S)*&
      (w(ix^S,b0_+idim)**2)/w(ix^S,rho_))))&
      +abs(w(ix^S,m0_+idim)/w(ix^S,rho_))

if(oktest) write(*,*)'cmax:',cmax(ixtest^D)

return 
end

!=============================================================================
subroutine getcsound2(w,ix^L,csound2)

! Calculate the square of the thermal sound speed csound2 within ix^L
! from the conservative variables in w.
! For isothermal case (gamma=1) csound2=eqpar(csound2_)
! For adiabatic case  (gamma>1) csound2=gamma*adiab*rho**(gamma-1)

include 'vacdef.f'

double precision:: w(ixG^T,nw),csound2(ixG^T)
integer:: ix^L
!-----------------------------------------------------------------------------

if(eqpar(gamma_)==one)then
   csound2(ix^S)=eqpar(csound2_)
else
   csound2(ix^S)=eqpar(gamma_)*eqpar(adiab_)*w(ix^S,rho_)**(eqpar(gamma_)-1)
endif

return 
end

!=============================================================================
subroutine getcsound2prim(w,ix^L,csound2)

! Calculate the square of the thermal sound speed csound2 within ix^L
! from the primitive variables in w. For MHDISO/ADIAB same as getcsound2

include 'vacdef.f'

double precision:: w(ixG^T,nw),csound2(ixG^T)
integer:: ix^L
!-----------------------------------------------------------------------------

call getcsound2(w,ix^L,csound2)

return 
end

!=============================================================================
subroutine getptotal(w,ix^L,p)

!!! This subroutine should not use tmp or tmp2

! Calculate total pressure within ix^L including magnetic field
! For gamma=1, p=csound**2*rho    + 0.5*b**2
! otherwise    p=adiab*rho**gamma + 0.5*b**2

include 'vacdef.f'

double precision::  w(ixG^T,nw)
integer:: ix^L
double precision:: p(ixG^T)
!-----------------------------------------------------------------------------

if(eqpar(gamma_)==one)then
   p(ix^S)=eqpar(csound2_)*w(ix^S,rho_)+half*(^C&w(ix^S,b^C_)**2+)
else
   p(ix^S)=eqpar(adiab_)*w(ix^S,rho_)**eqpar(gamma_)+half*(^C&w(ix^S,b^C_)**2+)
endif

return 
end

!=============================================================================
subroutine getpthermal(clipping,w,ix^L,p)

!!! This subroutine should not use tmp or tmp2

! Calculate thermal pressure within ix^L
! For gamma=1, p=csound**2*rho
! otherwise    p=adiab*rho**gamma

include 'vacdef.f'

logical:: clipping
double precision::  w(ixG^T,nw)
integer:: ix^L
double precision:: p(ixG^T)
!-----------------------------------------------------------------------------

if(eqpar(gamma_)==one)then
   p(ix^S)=eqpar(csound2_)*w(ix^S,rho_)
else
   p(ix^S)=eqpar(adiab_)*w(ix^S,rho_)**eqpar(gamma_)
endif

return 
end

!=============================================================================

! end module vacphys0 - mhdiso
!##############################################################################
