#!/usr/bin/perl -s
# Convert or test the endianness of a VAC binary/real*4 data file
# Also convert from Cray format (8 byte integer)

undef $/;

# Store input flags in long variable names
$Test=$t;
$Convert=$c;
$Inplace=$i;
$Keep=$k;
$tocray=$C;
$Quiet=$q;
$NARG = @ARGV;

$zero=pack('L',0);

if($Convert && $Inplace){
    print STDERR "You cannot use the -i and -c flags at the same time!\n\n";
    &helpmsg;
}

&testmachine;

if($Convert){
    unless($NARG==2){
	print STDERR "The -c flag requires two filenames!\n\n";
	&helpmsg; 
    }
    &converttofile($ARGV[1]) if &readhead($ARGV[0]);
}elsif($Test || $Inplace){
    unless($NARG>0){
	print STDERR "Provide at least one file name!\n\n";
	&helpmsg; 
    }
    while($file=shift(@ARGV)){
	if(&readhead($file) && $Inplace){
	    if(&converttofile("$file~")){
		rename("$file~",$file) ||
		    die "Could not move $file~ to $file: $!\n";
		print "\nMoved $file~ to $file\n\n" unless $Quiet;
	    }
	}
    }
}else{
    if(@ARGV){print STDERR "Use one of the -t -i or -c flags!\n\n";}
    &helpmsg; 
}

print "\nScript endian finished running\n\n" 
   if $NARG>1 && !$Quiet && !$Convert;

exit;

##############################################################################
sub helpmsg{

print STDERR <<HELPMSG;
Usage: endian [-q] [-t] [-k] [-C] -[c|i] filename1 [filename2...]

TEST the endianness (and Cray) format of one or more files:
   Fix/endian -t data/example22.out
   Fix/endian -t data/*.out
CONVERT a file to another file with opposite endianness
(note that the output file will be overwritten!):
   Fix/endian -c data/oldfilename data/newfilename
IN-PLACE conversion of the endiannes for one or more files
(FILENAME~ will be used for temporary storage):
   Fix/endian -i newdata/*.out
CRAY format (8-byte integers) for the output file:
   Fix/endian -C -c data/oldfilename data/crayfilename
KEEP the endiannes if only converting between Cray and normal integer formats: 
   Fix/endian -k -c data/crayfilename data/newfilename
   Fix/endian -k -C -i craydata/*.ini
QUIET mode, e.g. to convert many files in place:
   Fix/endian -q -i data/*.out

HELPMSG

exit;
}

##############################################################################
sub testmachine{

    $M=79;                         # Machine value
    $B=unpack 'N', pack('L',79);   # Big endian value
    $L=&convint($B);               # Little endian value

    if($M == $B){
	$machine='big';
    }elsif($M == $L){
	$machine='little';
    }else{
	die "Machine is neither little nor big endian type!\n";
    }
    print "\nThis is a $machine endian machine.\n\n" unless $Quiet;

}

##############################################################################
sub readhead{

local($file)=@_;

open(FROM,"$file") || die "Could not open $file: $!\n";

if(-T $file){
    print "$file seems to be an ASCII file!\n"; return(0);
}

if(200 > -s $file){
   print "$file is too small to be a binary VAC data file!\n";
   return(0);
}

read FROM, $line1, 91;  # read len1,headline,len1,len2

($l1,$headline,$l1,$l2)=unpack 'La79LL', $line1;

if($l1 == $B){
   $from='big';    $to= $Keep ? 'big' : 'little';
}elsif($l1 == $L){
   $from='little'; $to= $Keep ? 'little': 'big';
}else{
    print "$file is not a VAC binary data file in UNIX F77 format!\n";
    return(0);
}

$convertfrom=$from ne $machine;
$convertto  =$to   ne $machine;

$len1=pack("L",79);
$len1=&convstr($len1) if $convertto;        # length of line1 for output

$ll2= $convertfrom ? &convint($l2) : $l2;   # length of line2 from input

# Decide file type based on the length of the 2nd input line
if($ll2 == 24){
    $precision="double"; $r='d'; $rbyte=8; $ibyte=4; $double=1; $cray=0
}elsif($ll2 == 20){
    $precision="single"; $r='f'; $rbyte=4; $ibyte=4; $double=0; $cray=0;
}elsif($ll2 == 40){
    $precision="double"; $r='d'; $rbyte=8; $ibyte=8; $double=1; $cray=1;
    $type="Cray ";
}elsif($ll2 == 36){
    $precision="single"; $r='f'; $rbyte=4; $ibyte=8; $double=0; $cray=1;
    $type="Cray ";
}else{
    print "$file is not a VAC binary data file in UNIX F77 format!\n";
    return(0);
}

if($Keep && ($cray == $tocray)){
    if($cray){print "$file is already in Cray format,\n"}
    else{     print "$file is not in Cray format,\n"}
    print "thus -k option means no transformation at all!\n";
    return(0);
}

$ibyteout= $tocray ? 8 : 4;
$typeout=  $tocray ? "Cray " : "";

read FROM, $line2, $ll2;           # read line2 
read FROM, $l2, 4;                 # read closing length

$len2=pack("L",4*$ibyteout+$rbyte);# calculate length of line 2 for output
$len2=&convstr($len2) if $convertto;

&line2fromcray if $cray;           # Remove extra bytes for Cray input file
$line2conv=&convstr($line2);       # Convert endiannes
&swaptbytes if $double;            # Swap bytes of time variable "T" if needed
$line2_= $Keep ? $line2 : $line2conv; # Line 2 for output
&line2tocray if $tocray;           # Insert extra bytes for Cray output file

# Read values from line 2

($it,$t,$ndimini,$neqpar,$nw)=unpack "l${r}lll",
    $convertfrom ? $line2conv : $line2; 

$ndim=abs($ndimini);

$ll3=$ibyte*$ndim;
read FROM, $l3, 4;                 # len3
read FROM, $line3, $ll3;           # line3: n1, n2..
read FROM, $l3, 4;                 # len3

$len3=pack("L",$ibyteout*$ndim);   # calculate length of line 3 for output
$len3=&convstr($len3) if $convertto;

&line3fromcray if $cray;                              # remove extra Cray bytes
$line3conv=&convstr($line3);                          # convert endiannes
$line3_= $Keep ? $line3 : $line3conv;                 # line 3 for output
&line3tocray if $tocray;                              # insert extra Cray bytes

@nx= unpack "l*", $convertfrom ? $line3conv : $line3; # Read nx from line 3
$nxs=1; foreach $nx (@nx){$nxs*=$nx};

$ll4=$rbyte*$neqpar;               # length of line4 from input
read FROM, $l4, 4;
read FROM, $line4, $ll4;           # line4: eqpar
read FROM, $l4, 4;

$len4=pack("L",$ll4);    # calculate length of line 4 for output
$len4=&convstr($len4) if $convertto;

$line4conv=$double ? &convdble($line4) : &convstr($line4); # convert endianness
$line4_= $Keep ? $line4 : $line4conv;                      # line 4 for output
@eqpar= unpack "$r*", $convertfrom ? $line4conv : $line4;  # read eqpar

read FROM, $l5, 4;
read FROM, $varnames, 79;                   # line5: varnames
read FROM, $l5, 4;

$len5=$len1;                                # length of line 5 

$llx=$rbyte*$nxs*$ndim;                      # length of the X array
$lenx=pack("L",$llx);                        # length of X for output
$lenx=&convstr($lenx) if $convertto;

$llw=$rbyte*$nxs;                            # length of W(*,*..,iw)
$lenw=pack("L",$llw);                        # length of W for output
$lenw=&convstr($lenw) if $convertto;

print "$file is a $from endian $type$precision precision file.\n"
   if $Test || !$Quiet;

unless($Quiet){
    print "\nheadline=",substr($headline,0,70),"\n";
    print "it=$it t=$t ndim=$ndimini neqpar=$neqpar nw=$nw\n";
    print "nx=",join(',',@nx),"\n";
    print "eqpar=",join(',',@eqpar),"\n";
    print "names=",substr($varnames,0,70),"\n\n";

    $pictsize=(6+$nw)*8+2*79+(4+$ndim)*$ibyte+
	(1+$neqpar+$nxs*($ndim+$nw))*$rbyte;
    $filesize= -s $file;
    print "file=$filesize bytes / snapshot=$pictsize bytes = ",
          $filesize/$pictsize," snapshot(s)\n\n";
}

return(1);
}

##############################################################################
sub converttofile{

    local($file)=$_[0];
    open(TO,">$file") || print STDERR "Could not open $file: $!\n", return(0);

    print "$file will be a $to endian $typeout$precision precision file...\n\n"
	    unless $Quiet;

    &printhead;
    &dobody;
    &dorest;

    print "\nFinished conversion to $file\n" unless $Quiet;

    return(1);
}

##############################################################################
sub printhead{

print TO   $len1,$headline,$len1;
print TO   $len2,$line2_,$len2;
print TO   $len3,$line3_,$len3;
print TO   $len4,$line4_,$len4;
print TO   $len5,$varnames,$len5;

}

##############################################################################
sub dobody{

    read FROM, $lx, 4;
    read FROM, $xx, $llx;             # read x(*,*..)
    read FROM, $lx, 4;
    print TO   $lenx, 
           $Keep ? $xx : ($double ? &convdble($xx) : &convstr($xx)), $lenx;

    for($iw=0; $iw<$nw; $iw++){
	read FROM, $lw, 4;
	read FROM, $ww, $llw;         # read len,w(*,*..,iw),len
	read FROM, $lw, 4;
	print TO   $lenw, 
	   $Keep ? $ww : ($double ? &convdble($ww): &convstr($ww)), $lenw;
    }

}

##############################################################################
sub dorest{

# Read rest of snapshots using the header info

    $ipict=0;
    print "Converted snapshot ",++$ipict,"\n" unless $Quiet;

    while(read FROM,$l1,4){                  # read len1

	read FROM, $headline,79;             # line1: headline
	read FROM, $l1l2, 8;                 # read len1, len2
	read FROM, $line2, $ll2;             # line2: it,t,ndim,neqpar,nw 
	read FROM, $l2l3, 8;                 # read len2, len3
	read FROM, $line3, $ll3;             # line3: nx1, nx2..
	read FROM, $l3l4, 8;                 # read len3, len4
	read FROM, $line4, $ll4;             # line4: eqpar1,eqpar2..
	read FROM, $l4l5, 8;                 # len4,len5
	read FROM, $varnames, 79;            # line5: varnames
	read FROM, $l5, 4;                   # len5

	# Convert line 2

	&line2fromcray if $cray;
        if($Keep){
	    $line2_=$line2;
	}else{
	    $line2conv=&convstr($line2);
	    &swaptbytes if $double;
	    $line2_= $line2conv;
	}

	# line 3 contains the grid size, it is the same for all snapshots

	# Convert line 4

        if($Keep){
	    $line4_=$line4;
	}else{
	    $line4_= $double ? &convdble($line4) : &convstr($line4);
	}

	&printhead;
	
	&dobody;
	
	print "Converted snapshot ",++$ipict,"\n" unless $Quiet;
    }
}

##############################################################################
sub convint{
    unpack('L',reverse pack('L',$_[0]));
}

##############################################################################
sub convstr{
    local($i);
    $_=$_[0];
    for($i=0; $i<length(); $i+=4){
        substr($_,$i,4)=reverse substr($_,$i,4);
    }
    $_;
}

##############################################################################
sub convdble{
    local($i);
    $_=$_[0];

    for($i=0; $i<length(); $i+=8){
        substr($_,$i,8)=reverse(substr($_,$i,8));
    }

    $_;

}
##############################################################################
sub line2fromcray{
    # get rid of extra bytes of Cray format in line 2: it,t,ndim,neqpar,nw
    $line2=substr($line2,4,4).substr($line2,8,$rbyte).
	substr($line2,-20,4).substr($line2,-12,4).substr($line2,-4,4);
}
##############################################################################
sub line2tocray{
    # insert extra bytes of Cray format in line 2: it,t,ndim,neqpar,nw
    $line2_=$zero.substr($line2_,0,4).substr($line2_,4,$rbyte).
            $zero.substr($line2_,-12,4).$zero.substr($line2_,-8,4).
            $zero.substr($line2_,-4,4);
}
##############################################################################
sub line3fromcray{
    # get rid of extra bytes of Cray format in line 3 containing the nx array
    if($ndim==1){
	$line3=substr($line3,4,4);
    }elsif($ndim==2){
	$line3=substr($line3,4,4).substr($line3,12,4);
    }else{
	$line3=substr($line3,4,4).substr($line3,12,4).substr($line3,20,4);
    }
}
##############################################################################
sub line3tocray{
    # insert extra bytes of Cray format in line 3 containing the nx array
    if($ndim==1){
	$line3_=$zero.$line3_;
    }elsif($ndim==2){
	$line3_=$zero.substr($line3_,0,4).$zero.substr($line3_,4,4);
    }else{
	$line3_=$zero.substr($line3_,0,4).$zero.substr($line3_,4,4).
                $zero.substr($line3_,8,4);
    }
}
##############################################################################
sub swaptbytes{
    # swap 2 bytes of double precision time "T" in the converted line 2

    substr($line2conv,4,8)=substr($line2conv,8,4).substr($line2conv,4,4);
}
